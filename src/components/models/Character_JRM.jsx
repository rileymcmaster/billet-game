/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 /Users/rileymcmaster/Projects/Personal/threejs/ecctrl/public/jrm_3_mixrig_7.glb --transform --simplify 
Files: /Users/rileymcmaster/Projects/Personal/threejs/ecctrl/public/jrm_3_mixrig_7.glb [30.03MB] > /Users/rileymcmaster/Projects/Personal/threejs/ecctrl/jrm_3_mixrig_7-transformed.glb [1.64MB] (95%)
*/

import React, { forwardRef, useEffect, useRef } from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { AdditiveAnimationBlendMode } from "three";

// const defaultPos = [0, -1, 0];
const defaultPos = [0, -0.7, 0];
const src = "/assets/models/jrm_3_mixrig_7-transformed.glb";

const Character_JRM = (props, refFwd) => {
	const { animation = null, position = defaultPos, scale = 0.75, rotate = 0, ...rest } = props;
	const characterRef = refFwd ? refFwd : useRef(null);

	const { scene, animations } = useGLTF(src);
	const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
	const { nodes, materials } = useGraph(clone);
	const { ref, actions, names, mixer } = useAnimations(animations);

	useEffect(() => {
		// set up some defaults for jump and jumpland
		actions["jump joy"].blendMode = AdditiveAnimationBlendMode;
		actions["jump joy"].crossFadeTo(actions["jump_land"], 0.05, false);
		actions["jump_land"].blendMode = AdditiveAnimationBlendMode;

		const isValid = names.some((name) => animation === name);
		if (!animation || !isValid) return;
		actions[animation].reset().fadeIn(0.5).play();

		return () => actions[animation].fadeOut(0.5);
	}, [actions, names]);
	return (
		<group ref={ref} {...rest} dispose={null}>
			<group ref={characterRef} name="Scene" scale={scale} position={position} rotation-y={rotate}>
				<skinnedMesh
					receiveShadow
					castShadow
					name="jrm-mesh"
					geometry={nodes["jrm-mesh"].geometry}
					material={materials["jrm lo.001"]}
					skeleton={nodes["jrm-mesh"].skeleton}
					rotation={[Math.PI / 2, 0, 0]}
					scale={0.01}
				/>
				<primitive object={nodes.jrm} />
			</group>
		</group>
	);
};

export default forwardRef(Character_JRM);

useGLTF.preload(src);
